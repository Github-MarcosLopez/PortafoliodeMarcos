"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Adapter = void 0;
var better_sqlite3_1 = __importDefault(require("better-sqlite3"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = require("path");
var utils_1 = require("./utils");
var adapter_1 = require("./adapter");
Object.defineProperty(exports, "Adapter", { enumerable: true, get: function () { return adapter_1.Adapter; } });
var DDL = "\nCREATE TABLE IF NOT EXISTS cache (key TEXT PRIMARY KEY, value BLOB, filename TEXT, ttl REAL NOT NULL);\nCREATE INDEX IF NOT EXISTS cache_ttl ON cache (ttl);\n";
var Cache = /** @class */ (function () {
    function Cache(_a) {
        var _b = _a === void 0 ? {} : _a, path = _b.path, ttl = _b.ttl, tbd = _b.tbd;
        this.ttl = 3600; // time to live
        this.tbd = 3600; // time before deletion
        this.path = (0, path_1.join)(process.env.TMPDIR || '/tmp', 'hdc');
        if (path)
            this.path = path;
        fs_extra_1.default.mkdirpSync(this.path);
        if (ttl)
            this.ttl = ttl;
        if (tbd)
            this.tbd = tbd;
        var db = new better_sqlite3_1.default((0, path_1.join)(this.path, 'cache.db'));
        db.exec('PRAGMA journal_mode = WAL');
        for (var _i = 0, _c = DDL.trim().split('\n'); _i < _c.length; _i++) {
            var s = _c[_i];
            db.prepare(s).run();
        }
        this.db = db;
    }
    Cache.prototype.set = function (key, value, ttl) {
        return __awaiter(this, void 0, void 0, function () {
            var insert, filename;
            return __generator(this, function (_a) {
                if (!ttl)
                    ttl = this.ttl;
                insert = this.db.prepare('INSERT INTO cache (key, value, filename, ttl) VALUES (@key, @value, @filename, @valid)' +
                    ' ON CONFLICT(key)' +
                    ' DO UPDATE SET value = @value, ttl = @valid, filename = @filename');
                filename = null;
                // larger than 10KB
                if (value.length > 10 * 1024) {
                    filename = (0, utils_1.md5name)(key);
                    (0, utils_1.write)(this.path, filename, value);
                }
                insert.run({
                    key: key,
                    value: filename ? null : value,
                    filename: filename,
                    valid: new Date().getTime() / 1000 + ttl,
                });
                return [2 /*return*/];
            });
        });
    };
    Cache.prototype.get = function (key, defaultValue) {
        return __awaiter(this, void 0, void 0, function () {
            var rv;
            return __generator(this, function (_a) {
                rv = this.db
                    .prepare('SELECT value, filename FROM cache WHERE key = ?')
                    .get(key);
                if (!rv)
                    return [2 /*return*/, defaultValue];
                if (rv && rv.filename)
                    rv.value = (0, utils_1.read)(this.path, rv.filename);
                return [2 /*return*/, rv.value];
            });
        });
    };
    Cache.prototype.has = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var now, rv;
            return __generator(this, function (_a) {
                now = new Date().getTime() / 1000;
                rv = this.db.prepare('SELECT ttl FROM cache WHERE key = ?').get(key);
                return [2 /*return*/, !rv ? 'miss' : rv.ttl > now ? 'hit' : 'stale'];
            });
        });
    };
    Cache.prototype.del = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var rv;
            return __generator(this, function (_a) {
                rv = this.db
                    .prepare('SELECT filename FROM cache WHERE key = ?')
                    .get(key);
                this.db.prepare('DELETE FROM cache WHERE key = ?').run(key);
                this._delFile(rv === null || rv === void 0 ? void 0 : rv.filename);
                return [2 /*return*/];
            });
        });
    };
    Cache.prototype._delFile = function (filename) {
        if (!filename)
            return;
        var f = (0, path_1.join)(this.path, filename);
        fs_extra_1.default.unlink(f).catch();
    };
    Cache.prototype.purge = function () {
        return __awaiter(this, void 0, void 0, function () {
            var now, rows, _i, rows_1, row;
            return __generator(this, function (_a) {
                now = new Date().getTime() / 1000 - this.tbd;
                rows = this.db
                    .prepare('SELECT key, filename FROM cache WHERE ttl < ?')
                    .all(now);
                this.db.prepare('DELETE FROM cache WHERE ttl < ?').run(now);
                for (_i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                    row = rows_1[_i];
                    this._delFile(row.filename);
                }
                (0, utils_1.purgeEmptyPath)(this.path);
                return [2 /*return*/, rows.length];
            });
        });
    };
    return Cache;
}());
exports.default = Cache;
